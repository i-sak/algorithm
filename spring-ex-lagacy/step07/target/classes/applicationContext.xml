<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- test.* : test 이하 어노테이션 컴포넌트의 객체를 생성한다. -->
	<context:component-scan base-package="test.*"/>
	<context:component-scan base-package="test01"/>
	
	<!-- DataSource 등록 --> <!-- connection pool -->	
	 <!-- commons.jdbc.jar를 쓰기 위함 -->		
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="jspexam"/>
		<property name="password" value="m1234"/>
	</bean>
	
	<!-- Spring JDBC 설정 --> 		<!-- JDBC J템플릿을 사용하기 위한.. Spring은 설정이 많다. -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">		
		<property name="dataSource" ref="dataSource"/>		<!-- 변수로써 데이터소스가 있음 -->
	</bean>
	
</beans>



<!--

[작업순서]	Jdbc Template
sql > bean(DTO, VO) > applicationContext.xml 
					1. context:component-scan @어노테이션 세팅 "test" ]
					2. DataSource 등록 : bean > DataSource 등록 > value : BasicDataSource
					3. property : 각 driveClass / url / user / password 등록
					4. spring JDBC 설정 : jdbcTemplate - JDBC를 정형화한 것.
> RowMapper (implements) Interface > rs.결과값 가져오기 > vo에rs.값 대입>return Bean(vo);
> ScoreDAOSpring
				1. jdbcTemplate bean에서 설정하여 바로 생성 Autowired
				2. SQL 명령어 세팅
				3. 각 CRUD 기능 메소드 구현
					- jdbcTemplate을 이용하여 한줄짜리 코드 작성
					- 값을 불러오는 것은 RowMapper의 값을 이용하여 값을 받음.
				4. Repository로 전체 wrap.. bean 객체 생성
> ScoreService 기능을 목록화 하여 나타냄, interface (기능x)
> ScoreServiceImpl > ScoreService implements (상속) > 메소드 구현 > 기능 리턴
			1. Autowired로 DAO등록
			2. 각 기능 구현
> main > meni 구현

-->
